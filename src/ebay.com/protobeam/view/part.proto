syntax = "proto3";
package view;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

service PartitionView {
	rpc fetch(FetchRequest) returns (FetchResult) {}
	rpc fetchAt(FetchAtRequest) returns (FetchResult) {}
	rpc check(CheckRequest) returns (CheckResult) {}
	rpc stats(StatsRequest) returns (StatsResult) {}
	rpc sampleKeys(SampleKeysRequest) returns (SampleKeysResult) {}
	rpc metrics(MetricsRequest) returns (MetricsResult) {}
	rpc profile(ProfileRequest) returns (ProfileResult) {}
	rpc keyStats(KeyStatsRequest) returns (KeyStatsResult) {}
}

message FetchRequest {
	string key = 1;
}

message FetchResult {
	int64  index  = 1;
	string value  = 3;
	bool   exists = 2;
}

message FetchAtRequest {
	int64  index = 2;
	string key   = 1;
}

message CheckRequest {
	int64  					 start    = 2;
	int64  					 through  = 3;
	string 					 key      = 1;
	google.protobuf.Duration waitTime = 4 [(gogoproto.stdduration)=true, (gogoproto.nullable)=false]; // if the resulting is pending, will wait/check internally this long before returning
}

message CheckResult {
	bool ok		 = 1;
	bool pending = 2;
}

message StatsRequest {
}

message StatsResult {
	int64	lastIndex	= 4;
	uint32 	partition 	= 1;
	uint32 	keys		= 2;
	uint32 	txs			= 3;
	MemStats memStats	= 5;
}

message MemStats {
	uint64	heap 		 = 1;
	uint64	sys			 = 2;
	uint64	totalPauseMs = 3;
	uint32  numGC		 = 4;
}

message SampleKeysRequest {
	uint32 maxKeys = 1;
}

message SampleKeysResult {
	repeated string keys = 1;
}

message MetricsRequest {
}

message MetricsResult {
	message Row {
		repeated string cells = 1;
	}
	repeated Row rows = 1;
}

message ProfileRequest {
	google.protobuf.Duration duration = 1 [(gogoproto.stdduration)=true, (gogoproto.nullable)=false];
	string	 				 filename = 2;
}

message ProfileResult {
}

message KeyStatsRequest {
	uint32 bucketSize = 1;
}

message KeyStatsResult {
	map<uint32, uint32> versionCounts = 1;	// # of versions in a key -> count of keys with that many versions
}